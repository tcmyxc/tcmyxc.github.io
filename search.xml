<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Lua 编译</title>
    <url>/archives/41ff62c0.html</url>
    <content><![CDATA[<h1 id="一、环境以及安装包"><a href="#一、环境以及安装包" class="headerlink" title="一、环境以及安装包"></a>一、环境以及安装包</h1><h2 id="1-1-环境以及安装包"><a href="#1-1-环境以及安装包" class="headerlink" title="1.1 环境以及安装包"></a>1.1 环境以及安装包</h2><ul>
<li>gcc 编译环境（本人选择TDM-GCC9.2.0，<a href="https://jmeubank.github.io/tdm-gcc/">下载链接</a>）</li>
<li>Lua 源代码（本人选择 <a href="http://www.lua.org/ftp/">lua-5.3.6</a>）</li>
</ul>
<span id="more"></span>

<h2 id="1-2-安装前的准备工作"><a href="#1-2-安装前的准备工作" class="headerlink" title="1.2 安装前的准备工作"></a>1.2 安装前的准备工作</h2><ul>
<li>将 TDM-GCC 的 bin 目录添加到环境变量</li>
<li>进入 TDM-GCC 的 bin 目录，将 <code>把 mingw32-make.exe</code> 复制一份并修改为改为 <code>make.exe</code>，如下图：<br><img src="../images/20210219211832365.png" alt="在这里插入图片描述"></li>
<li>验证 GCC 环境，输出如下<br><img src="../images/20210219212048248.png" alt="在这里插入图片描述"></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=C:/TDM-GCC-64/bin/../libexec/gcc/x86_64-w64-mingw32/9.2.0/lto-wrapper.exe</span><br><span class="line">Target: x86_64-w64-mingw32</span><br><span class="line">Configured with: ../../../src/gcc-git-9.2.0/configure --build=x86_64-w64-mingw32 --enable-targets=all --enable-languages=ada,c,c++,fortran,lto,objc,obj-c++ --enable-libgomp --enable-lto --enable-graphite --enable-cxx-flags=-DWINPTHREAD_STATIC --disable-build-with-cxx --disable-build-poststage1-with-cxx --enable-libstdcxx-debug --enable-threads=posix --enable-version-specific-runtime-libs --enable-fully-dynamic-string --enable-libstdcxx-threads --enable-libstdcxx-time --with-gnu-ld --disable-werror --disable-nls --disable-win32-registry --enable-large-address-aware --disable-rpath --disable-symvers --prefix=/mingw64tdm --with-local-prefix=/mingw64tdm --with-pkgversion=tdm64-1 --with-bugurl=http://tdm-gcc.tdragon.net/bugs</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 9.2.0 (tdm64-1)</span><br><span class="line"></span><br><span class="line">&gt;g++ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=g++</span><br><span class="line">COLLECT_LTO_WRAPPER=C:/TDM-GCC-64/bin/../libexec/gcc/x86_64-w64-mingw32/9.2.0/lto-wrapper.exe</span><br><span class="line">Target: x86_64-w64-mingw32</span><br><span class="line">Configured with: ../../../src/gcc-git-9.2.0/configure --build=x86_64-w64-mingw32 --enable-targets=all --enable-languages=ada,c,c++,fortran,lto,objc,obj-c++ --enable-libgomp --enable-lto --enable-graphite --enable-cxx-flags=-DWINPTHREAD_STATIC --disable-build-with-cxx --disable-build-poststage1-with-cxx --enable-libstdcxx-debug --enable-threads=posix --enable-version-specific-runtime-libs --enable-fully-dynamic-string --enable-libstdcxx-threads --enable-libstdcxx-time --with-gnu-ld --disable-werror --disable-nls --disable-win32-registry --enable-large-address-aware --disable-rpath --disable-symvers --prefix=/mingw64tdm --with-local-prefix=/mingw64tdm --with-pkgversion=tdm64-1 --with-bugurl=http://tdm-gcc.tdragon.net/bugs</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 9.2.0 (tdm64-1)</span><br><span class="line"></span><br><span class="line">&gt;make -v</span><br><span class="line">GNU Make 3.82.90</span><br><span class="line">Built <span class="keyword">for</span> i686-pc-mingw32</span><br><span class="line">Copyright (C) 1988-2012 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure>

<h1 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h1><ul>
<li><p>将下载的源代码解压</p>
</li>
<li><p>进入源代码根目录，也就是 <code>lua-5.3.6</code> 目录下</p>
</li>
<li><p>按住 <code>shift</code> 键的同时点击鼠标右键，选择 <code>在此处打开 PowerShell 窗口</code></p>
</li>
<li><p>输入 <code>make mingw</code><br><img src="../images/2021021921314179.png" alt="在这里插入图片描述"><br><img src="../images/20210219213212429.png" alt="在这里插入图片描述"></p>
</li>
<li><p>编译完成，生成的目标文件共有三个 <code>lua.exe</code>，<code>luac.exe</code>，<code>lua53.dll</code>，在 <code>src</code> 目录下<br><img src="../images/20210219213307215.png" alt="在这里插入图片描述"></p>
</li>
<li><p>可以直接将 <code>src</code> 添加到环境变量，或者将上述三个文件保存在某个目录，然后将这个目录添加到环境变量</p>
</li>
<li><p>验证，在命令行窗口输入 <code>lua</code>，或者输入 <code>lua -v</code><br><img src="../images/20210219213357495.png" alt="在这里插入图片描述"><br><img src="../images/20210219213454730.png" alt="在这里插入图片描述"></p>
</li>
</ul>
<h1 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h1><p>我们通过有关的环境变量配置即可自己手动编译一个自己的 Lua 环境，但是这里也有一个注意点，本人在 <code>TDM-GCC</code> 以及 <code>Mingw</code> 的 GCC 编译环境下编译出来的不需要再依赖其他的库，但是在 <code>cygwin64</code> 平台下编译的 Lua 解释器还需要依赖 <code>cygwin64</code> 的有关库（也就是说编译好的文件不能共享给其他人使用）</p>
<h1 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h1><ul>
<li>[1] Lua 官方文档</li>
<li>[2] <a href="https://github.com/joedf/LuaBuilds">https://github.com/joedf/LuaBuilds</a> </li>
</ul>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet学习笔记</title>
    <url>/archives/1a5315c2.html</url>
    <content><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Servlet（Server Applet）是<a href="https://baike.baidu.com/item/Java/85979">Java</a> Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>端程序，具有独立于平台和<a href="https://baike.baidu.com/item/%E5%8D%8F%E8%AE%AE/13020269">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href="https://baike.baidu.com/item/Web/150564">Web</a>内容。</p>
<p>广义的Servlet是指任何实现了Servlet接口的类</p>
<p>Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p>
<p>【总结】实现了servlet接口的java程序，就是servlet</p>
<h2 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h2><p>Servlet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>
<ol>
<li><p>maven模板，webapp，修改web.xml（这部分看自己tomcat服务器web.xml是啥，然后复制个头文件过来就行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="line"><span class="string">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;3.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>将项目的结构补充完整，java和resources</p>
</li>
<li><p>编写一个Servlet程序</p>
<ul>
<li><p>编写一个普通的类</p>
</li>
<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于get或者post只是实现方式不同，可以互相调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line"></span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>编写Servlet的映射</p>
<ul>
<li><p>为什么需要映射？</p>
<ul>
<li><p>因为我们写的是java程序，但是要通过浏览器访问，浏览器访问需要连接服务器，所以我们需要在web服务中注册我们写的Servlet，还需要给个URL路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.tcmyxc.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello&lt;<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>配置Tomcat</p>
<ul>
<li>注意配置项目发布的路径</li>
</ul>
</li>
<li><p>测试</p>
</li>
</ol>
<h2 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h2><p>Servlet由Web服务器调用</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate学习笔记</title>
    <url>/archives/9ec6fc96.html</url>
    <content><![CDATA[<h2 id="一、是什么？"><a href="#一、是什么？" class="headerlink" title="一、是什么？"></a>一、是什么？</h2><p>hibernate框架应用在javaee三层结构中 dao层框架</p>
<p>hibernate底层代码就是jdbc，hibernate对jdbc进行封装，使用hibernate好处，不需要写复杂jdbc代码了，<br>不需要写sql语句实现</p>
<p>开源的轻量级的框架</p>
<span id="more"></span>



<h2 id="ORM思想"><a href="#ORM思想" class="headerlink" title="ORM思想"></a>ORM思想</h2><p>orm：object relational mapping，对象关系映射<br>文字描述：<br>（1）让实体类和数据库表进行一一对应关系<br>让实体类首先和数据库表对应<br>让实体类属性 和 表里面字段对应<br>（2）不需要直接操作数据库表，而操作表对应实体类对象</p>
<p><img src="../images/clip_image002.jpg" alt="img"></p>
<p><img src="../images/clip_image002-1623322622876.jpg" alt="img"></p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="搭建一个demo"><a href="#搭建一个demo" class="headerlink" title="搭建一个demo"></a>搭建一个demo</h3><h4 id="1、使用IDEA创建一个Maven工程"><a href="#1、使用IDEA创建一个Maven工程" class="headerlink" title="1、使用IDEA创建一个Maven工程"></a>1、使用IDEA创建一个Maven工程</h4><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>解决编译时资源文件不生效的问题：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认打包资源文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、写个实体类"><a href="#2、写个实体类" class="headerlink" title="2、写个实体类"></a>2、写个实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> uid, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、写实体类对应的配置文件"><a href="#3、写实体类对应的配置文件" class="headerlink" title="3、写实体类对应的配置文件"></a>3、写实体类对应的配置文件</h4><p>建议：在实体类所在包里面创建，<code>实体类名称.hbm.xml</code></p>
<p><img src="../images/image-20210610190546796.png" alt="image-20210610190546796"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ Hibernate, Relational Persistence for Idiomatic Java</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span></span><br><span class="line"><span class="comment">  ~ See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html&gt;.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">&quot;com.tcmyxc.dao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置类名和表名的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;User&quot;</span> <span class="attr">table</span>=<span class="string">&quot;t_user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置主键自增长--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置类属性和表结构中列名的对应关系，不填就一模一样--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、创建hibernate的核心配置文件"><a href="#4、创建hibernate的核心配置文件" class="headerlink" title="4、创建hibernate的核心配置文件"></a>4、创建hibernate的核心配置文件</h4><p>名字是固定的：<code>hibernate.cfg.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  ~ Hibernate, Relational Persistence for Idiomatic Java</span></span><br><span class="line"><span class="comment">  ~</span></span><br><span class="line"><span class="comment">  ~ License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span></span><br><span class="line"><span class="comment">  ~ See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html&gt;.</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Database connection settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.url&quot;</span>&gt;</span>jdbc:mysql:///mytest?serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--可选配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JDBC connection pool (use the built-in) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.pool_size&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SQL dialect --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL8Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 输出 sql 语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--sql 语句格式化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动创建表</span></span><br><span class="line"><span class="comment">            update: 没有则创建，有则更新</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;com/tcmyxc/dao/User.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h4><p>第一步 加载hibernate核心配置文件</p>
<p>第二步 创建SessionFactory对象</p>
<p>第三步 使用SessionFactory创建session对象</p>
<p>第四步 开启事务</p>
<p>第五步 写具体逻辑 crud操作</p>
<p>第六步 提交事务</p>
<p>第七步 关闭资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">    cfg.configure();</span><br><span class="line"></span><br><span class="line">    SessionFactory sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;xwx&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    session.save(user);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hibernate核心api"><a href="#Hibernate核心api" class="headerlink" title="Hibernate核心api"></a>Hibernate核心api</h3><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><p>找到名称hibernate.cfg.xml配置文件，创建对象，把配置文件放到对象里面（加载核心配置文件）</p>
<h4 id="SessionFactory"><a href="#SessionFactory" class="headerlink" title="SessionFactory"></a>SessionFactory</h4><p>1 使用configuration对象创建sessionFactory对象<br>（1）创建sessionfactory过程中做事情：</p>
<ul>
<li>根据核心配置文件中，有数据库配置，有映射文件部分，到数据库里面根据映射关系把表创建</li>
</ul>
<p>2 创建sessionFactory过程中，这个过程特别耗资源的<br>（1）在hibernate操作中，建议一个项目一般创建一个sessionFactory对象</p>
<p>3 具体实现<br>（1）写工具类，写静态代码块实现</p>
<ul>
<li>静态代码块在类加载时候执行，执行一次</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionFactoryUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration cfg = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态代码块保证只被加载一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        cfg.configure();</span><br><span class="line">        sessionFactory = cfg.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SessionFactory <span class="title">getSessionFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>1 session类似于jdbc中connection</p>
<p>2 调用session里面不同的方法实现crud操作<br>（1）添加 save方法<br>（2）修改 update方法<br>（3）删除 delete方法<br>（4）根据id查询 get方法</p>
<p>3 session对象单线程对象<br>（1）session对象不能共用，只能自己使用</p>
<h3 id="增删改查那些事"><a href="#增删改查那些事" class="headerlink" title="增删改查那些事"></a>增删改查那些事</h3><h4 id="Hibernate实体类编写规则"><a href="#Hibernate实体类编写规则" class="headerlink" title="Hibernate实体类编写规则"></a>Hibernate实体类编写规则</h4><p>1 实体类里面属性私有的</p>
<p>2 私有属性使用公开的set和get方法操作</p>
<p>3 要求实体类有属性作为唯一值（一般使用id值）</p>
<p>4 实体类属性建议不使用基本数据类型，使用基本数据类型对应的包装类<br>（1）八个基本数据类型对应的包装类</p>
<ul>
<li>int – Integer</li>
<li>char—Character、</li>
<li>其他的都是首字母大写 比如 double – Double<br>（2）比如 表示学生的分数，假如 int score;</li>
<li>比如学生得了0分 ，int score = 0;</li>
<li>如果表示学生没有参加考试，int score = 0;不能准确表示学生是否参加考试<ul>
<li>解决：使用包装类可以了， Integer score = 0，表示学生得了0分，表示学生没有参加考试，Integer score = null;</li>
</ul>
</li>
</ul>
<h4 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h4><p><img src="../images/clip_image002-1623324391800.jpg" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置主键自增长--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p>根据 id 查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<p><img src="../images/image-20210610193221935.png" alt="image-20210610193221935"></p>
<h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">user.setPassword(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">session.update(user);</span><br><span class="line">User user2 = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure>

<p><img src="../images/image-20210610193536590.png" alt="image-20210610193536590"></p>
<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="comment">// 测试删除操作</span></span><br><span class="line">session.delete(user);</span><br><span class="line">User user2 = session.get(User.class, <span class="number">2</span>);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure>

<p><img src="../images/image-20210610193824545.png" alt="image-20210610193824545"></p>
<h2 id="其他的概念"><a href="#其他的概念" class="headerlink" title="其他的概念"></a>其他的概念</h2><h3 id="实体类对象状态"><a href="#实体类对象状态" class="headerlink" title="实体类对象状态"></a>实体类对象状态</h3><p>实体类状态有三种</p>
<p>（1）瞬时态：对象里面没有id值，对象与session没有关联</p>
<p><img src="../images/clip_image002-1623325203474.jpg" alt="img"></p>
<p>（2）持久态：对象里面有id值，对象与session关联</p>
<p><img src="../images/clip_image004.jpg" alt="img"></p>
<p>（3）托管态：对象有id值，对象与session没有关联</p>
<p><img src="../images/clip_image006.jpg" alt="img"></p>
<p>saveOrUpdate方法：实现添加、实现修改</p>
<p><img src="../images/clip_image002-1623325258642.jpg" alt="img"></p>
<p><img src="../images/clip_image004-1623325258643.jpg" alt="img"></p>
<p><img src="../images/clip_image006-1623325258643.jpg" alt="img"></p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>hibernate缓存特点：</p>
<p>第一类 hibernate的一级缓存</p>
<p>（1）hibernate的一级缓存默认打开的</p>
<p>（2）hibernate的一级缓存使用范围，是session范围，从session创建到session关闭范围</p>
<p>（3）hibernate的一级缓存中，存储数据必须 持久态数据</p>
<p>第二类 hibernate的二级缓存</p>
<p>（1）目前已经不使用了，替代技术 redis</p>
<p>（2）二级缓存默认不是打开的，需要配置</p>
<p>（3）二级缓存使用范围，是sessionFactory范围</p>
<p><img src="../images/clip_image002-1623325371492.jpg" alt="img"></p>
<h3 id="事务代码规范写法"><a href="#事务代码规范写法" class="headerlink" title="事务代码规范写法"></a>事务代码规范写法</h3><p>代码结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; 开启事务 提交事务&#125;</span><br><span class="line"><span class="keyword">catch</span>() &#123; 回滚事务&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123; 关闭&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTx</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    SessionFactory sessionFactory = <span class="keyword">null</span>;    </span><br><span class="line">    Session session = <span class="keyword">null</span>;    </span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="keyword">try</span> &#123;        </span><br><span class="line">        sessionFactory = HibernateUtils.getSessionFactory();        </span><br><span class="line">        session = sessionFactory.openSession();        </span><br><span class="line">        <span class="comment">//开启事务        </span></span><br><span class="line">        tx = session.beginTransaction();        </span><br><span class="line">        <span class="comment">//添加        </span></span><br><span class="line">        User user = <span class="keyword">new</span> User();        </span><br><span class="line">        user.setUsername(<span class="string">&quot;小马&quot;</span>);        </span><br><span class="line">        user.setPassword(<span class="string">&quot;250&quot;</span>);        </span><br><span class="line">        user.setAddress(<span class="string">&quot;美国&quot;</span>);        </span><br><span class="line">        session.save(user);        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;        </span><br><span class="line">        <span class="comment">//提交事务        </span></span><br><span class="line">        tx.commit();    </span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e) &#123;        </span><br><span class="line">    	e.printStackTrace();        </span><br><span class="line">        <span class="comment">//回滚事务        </span></span><br><span class="line">        tx.rollback();    </span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;        </span><br><span class="line">        <span class="comment">//关闭操作        </span></span><br><span class="line">        session.close();        </span><br><span class="line">        sessionFactory.close();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="../images/image-20210610194600591.png" alt="image-20210610194600591"></p>
<h2 id="回顾表和表之间的关系"><a href="#回顾表和表之间的关系" class="headerlink" title="回顾表和表之间的关系"></a>回顾表和表之间的关系</h2><p>一对多：分类和商品关系，一个分类里面有多个商品，一个商品只能属于一个分类</p>
<p>多对多：订单和商品关系，一个订单里面有多个商品，一个商品属于多个订单</p>
<p>多对多建表：创建第三张表维护关系</p>
<p><img src="../images/clip_image002-1623910791593.jpg" alt="img"></p>
<h2 id="查询方式介绍"><a href="#查询方式介绍" class="headerlink" title="查询方式介绍"></a>查询方式介绍</h2><h3 id="对象导航查询"><a href="#对象导航查询" class="headerlink" title="对象导航查询"></a>对象导航查询</h3><p>（1）根据id查询某个客户，再查询这个客户里面所有的联系人</p>
<p><img src="../images/clip_image002-1623913387871.jpg" alt="img"></p>
<h3 id="OID查询"><a href="#OID查询" class="headerlink" title="OID查询"></a>OID查询</h3><p>（1）根据id查询某一条记录，返回对象</p>
<p><img src="../images/clip_image002-1623913455625.jpg" alt="img"></p>
<h3 id="HQL查询"><a href="#HQL查询" class="headerlink" title="HQL查询"></a>HQL查询</h3><p>HQL，即hibernate query language，hibernate提供一种查询语言，hql语言和普通sql很相似</p>
<p>区别：普通sql操作数据库表和字段，hql操作实体类和属性</p>
<p>常用的hql语句</p>
<p>（1）查询所有： from 实体类名称</p>
<p>（2）条件查询： from 实体类名称 where 属性名称=? </p>
<p>（3）排序查询： from 实体类名称 order by 实体类属性名称 asc/desc</p>
<p>使用hql查询操作时候，使用Query对象</p>
<p>（1）创建Query对象，写hql语句</p>
<p>（2）调用query对象里面的方法得到结果</p>
<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><p><img src="../images/clip_image002-1623913606053.jpg" alt="img"></p>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p><img src="../images/clip_image002-1623913667053.jpg" alt="img"></p>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>在hql操作中，在语句里面不能写limit，hibernate的Query对象封装两个方法实现分页操作</p>
<p><img src="../images/clip_image002-1623913727409.jpg" alt="img"></p>
<h4 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h4><p> 投影查询：查询不是所有字段值，而是部分字段的值</p>
<p>投影查询hql语句写法：</p>
<p>（1）select 实体类属性名称1, 实体类属性名称2  from 实体类名称</p>
<p>（2）select 后面不能写 <code>* </code>，不支持的</p>
<p>具体实现：</p>
<p><img src="../images/clip_image002-1623914156308.jpg" alt="img"></p>
<h3 id="QBC查询"><a href="#QBC查询" class="headerlink" title="QBC查询"></a>QBC查询</h3><p>1、使用hql查询需要写hql语句实现，但是使用qbc时候，不需要写语句了，使用方法实现</p>
<p>2、使用qbc时候，操作实体类和属性</p>
<p>3、使用qbc，使用Criteria对象实现</p>
<h4 id="查询所有-1"><a href="#查询所有-1" class="headerlink" title="查询所有"></a>查询所有</h4><p><img src="../images/clip_image002-1623914241737.jpg" alt="img"></p>
<h4 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h4><p><img src="../images/clip_image002-1623914264974.jpg" alt="img"></p>
<h4 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h4><p><img src="../images/clip_image002-1623914337716.jpg" alt="img"></p>
<h4 id="统计查询"><a href="#统计查询" class="headerlink" title="统计查询"></a>统计查询</h4><p><img src="../images/clip_image002-1623914367144.jpg" alt="img"></p>
<h4 id="本地sql查询"><a href="#本地sql查询" class="headerlink" title="本地sql查询"></a>本地sql查询</h4><p>SQLQuery对象，使用普通sql实现查询</p>
<p>servlet调用service，service调用dao</p>
<p>（1）在dao里面对数据库crud操作<br>（2）在dao里面使用hibernate框架，使用hibernate框架时候，调用session里面的方法实现功能</p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>迫切内连接</p>
<p>（1）迫切内连接和内连接底层实现一样的</p>
<p>（2）区别：使用内连接返回list中每部分是数组，迫切内连接返回list每部分是对象</p>
<p>（3）hql语句写法：from  Customer  c  inner  join  fetch  c.setLinkMan</p>
<h2 id="检索策略"><a href="#检索策略" class="headerlink" title="检索策略"></a>检索策略</h2><p>检索策略分为两类：</p>
<p>（1）立即查询：根据id查询，调用get方法，一调用get方法马上发送语句查询数据库</p>
<p>（2）延迟查询：根据id查询，还有load方法，调用load方法不会马上发送语句查询数据，只有得到对象里面的值时候才会发送语句查询数据库</p>
<p>延迟查询分成两类：</p>
<p>（1）类级别延迟：根据id查询返回实体类对象，调用load方法不会马上发送语句</p>
<p>（2）关联级别延迟：查询某个客户，再查询这个客户的所有联系人，查询客户的所有联系人的过程是否需要延迟，这个过程称为关联级别延迟</p>
<p>批量抓取</p>
<p>查询所有的客户，返回list集合，遍历list集合，得到每个客户，得到每个客户的所有联系人</p>
<p><img src="../images/clip_image002-1623914745666.jpg" alt="img"></p>
<p>在客户的映射文件中，set标签配置 batch-size值，值越大发送语句越少</p>
<p><img src="../images/clip_image002-1623914783979.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA学习笔记</title>
    <url>/archives/4ac63db6.html</url>
    <content><![CDATA[<h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E6%8C%81%E4%B9%85%E5%8C%96/7316192">对象持久化</a>到数据库中。 </p>
<span id="more"></span>

<p>Sun引入新的JPA ORM规范出于两个原因：其一，简化现有Java EE和Java SE应用开发工作；其二，Sun希望整合ORM技术，实现天下归一。</p>
<p>JPA包括以下3方面的技术：</p>
<p><strong>ORM映射元数据</strong></p>
<p>JPA支持XML和<a href="https://baike.baidu.com/item/JDK">JDK</a>5.0注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E6%8C%81%E4%B9%85%E5%8C%96">对象持久化</a>到数据库表中；</p>
<p><strong>API</strong></p>
<p>用来操作实体对象，执行CRUD操作，框架在后台替代我们完成所有的事情，开发者从繁琐的JDBC和SQL代码中解脱出来。</p>
<p><strong>查询语言</strong></p>
<p>这是持久化操作中很重要的一个方面，通过<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a>而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。</p>
<p>JPA是需要Provider来实现其功能的，Hibernate就是JPA Provider中很强的一个，应该说无人能出其右。从功能上来说，JPA就是Hibernate功能的一个子集。</p>
<blockquote>
<p>JPA 是规范</p>
</blockquote>
<h2 id="2、HelloWorld"><a href="#2、HelloWorld" class="headerlink" title="2、HelloWorld"></a>2、HelloWorld</h2><p>（1）创建 persistence.xml, 在这个文件中配置持久化单元</p>
<p>JPA 规范要求在类路径的 META-INF 目录下放置persistence.xml</p>
<ul>
<li><p>需要指定跟哪个数据库进行交互;</p>
</li>
<li><p>需要指定 JPA 使用哪个持久化的框架以及配置该框架的基本属性</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要配置persistence-unit节点</span></span><br><span class="line"><span class="comment">    持久化单元:</span></span><br><span class="line"><span class="comment">        name:持久化单元名称</span></span><br><span class="line"><span class="comment">        transaction-type:事务管理的方式</span></span><br><span class="line"><span class="comment">                JTA: 分布式事先管理</span></span><br><span class="line"><span class="comment">                RESOURCE_LOCAL:本地事务管理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;myJPA&quot;</span> <span class="attr">transaction-type</span>=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        jpa的实现方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加持久化类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>com.tcmyxc.helloworld.Customer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        数据库信息</span></span><br><span class="line"><span class="comment">              用户名, javax.persistence.jdbc.user</span></span><br><span class="line"><span class="comment">              密码, javax.persistence.jdbc.password</span></span><br><span class="line"><span class="comment">              驱动, javax.persistence.jdbc.driver</span></span><br><span class="line"><span class="comment">              数据库地址 javax.persistence.jdbc.url</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            三个/  ///表示本地路径,端口为3306 jdbc:mysql://localhost:3306/test?serverTimezone=UTC--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///jpa_test?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        可选配置:配置jpa实现方的配置信息</span></span><br><span class="line"><span class="comment">                    显示sql执行语句</span></span><br><span class="line"><span class="comment">                    自动创建数据库表  hibernate.hbm2ddl.auto</span></span><br><span class="line"><span class="comment">                                        create,程序运行时创建数据库表(如果有表,先删除表再创建表)</span></span><br><span class="line"><span class="comment">                                        update,程序运行时创建表(如果表存在,则不会创建)</span></span><br><span class="line"><span class="comment">                                        none 不会创建表</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>（2）创建实体类, 使用 annotation 来描述实体类跟数据库表之间的映射关系.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久化类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;JPA_CUSTOMERS&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;LAST_NAME&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（3）使用 JPA API 完成数据增加、删除、修改和查询操作</p>
<ul>
<li><p>创建 EntityManagerFactory (对应 Hibernate 中的 SessionFactory);</p>
</li>
<li><p>创建 EntityManager (对应 Hibernate 中的Session);</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建 EntityManagerFactory</span></span><br><span class="line">    String persistenceUnitName = <span class="string">&quot;myJPA&quot;</span>;</span><br><span class="line">    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(persistenceUnitName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建 EntityManager</span></span><br><span class="line">    EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、开启事务</span></span><br><span class="line">    EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">    transaction.begin();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、CRUD 操作</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setLastName(<span class="string">&quot;xwx&quot;</span>);</span><br><span class="line">    customer.setEmail(<span class="string">&quot;1282494272@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    entityManager.persist(customer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、提交事务</span></span><br><span class="line">    transaction.commit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6、关闭 EntityManager</span></span><br><span class="line">    entityManager.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7、关闭 EntityManagerFactory</span></span><br><span class="line">    entityManagerFactory.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行截图：</p>
<p><img src="../images/image-20210612173746712.png" alt="image-20210612173746712"></p>
<p><img src="../images/image-20210612173801846.png" alt="image-20210612173801846"></p>
<h2 id="3、注解"><a href="#3、注解" class="headerlink" title="3、注解"></a>3、注解</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><p>@Entity 标注用于实体类声明语句之前，指出该Java 类为实体类，将映射到指定的数据库表。</p>
<h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p>当实体类与其映射的数据库表名不同名时需要使用 @Table 标注说明，该标注与 @Entity 标注并列使用，置于实体类声明语句之前，可写于单独语句行，也可与声明语句同行。</p>
<p>@Table 标注的常用选项是 name，用于指明数据库的表名</p>
<p>@Table标注还有一个两个选项 catalog 和 schema 用于设置表所属的数据库目录或模式，通常为数据库名。</p>
<p>uniqueConstraints 选项用于设置约束条件，通常不须设置。</p>
<h3 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h3><p>@Id 标注用于声明一个实体类的属性映射为数据库的主键列。该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。</p>
<p>@Id标注也可置于属性的getter方法之前。</p>
<h3 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="@GeneratedValue"></a>@GeneratedValue</h3><p>@GeneratedValue  用于标注主键的生成策略，通过 strategy 属性指定。默认情况下，JPA 自动选择一个最适合底层数据库的主键生成策略：SqlServer 对应 identity，MySQL 对应 auto increment。</p>
<p>在 javax.persistence.GenerationType 中定义了以下几种可供选择的策略：</p>
<ul>
<li><p>IDENTITY：采用数据库 ID自增长的方式来自增主键字段，Oracle 不支持这种方式；</p>
</li>
<li><p><strong>AUTO</strong>： JPA自动选择合适的策略，是默认选项；</p>
</li>
<li><p>SEQUENCE：通过序列产生主键，通过 @SequenceGenerator 注解指定序列名，MySql 不支持这种方式</p>
</li>
<li><p>TABLE：通过表产生主键，框架借由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。</p>
</li>
</ul>
<h3 id="Basic"><a href="#Basic" class="headerlink" title="@Basic"></a>@Basic</h3><p>@Basic 表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的 getXxxx() 方法,默认即为@Basic</p>
<p>fetch: 表示该属性的读取策略,有 EAGER 和 LAZY 两种,分别表示主支抓取和延迟加载,默认为 EAGER.</p>
<p>optional:表示该属性是否允许为null, 默认为true</p>
<h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>当实体的属性与其映射的数据库表的列不同名时需要使用@Column 标注说明，该属性通常置于实体的属性声明语句之前，还可与 @Id 标注一起使用。</p>
<p>@Column 标注的常用属性是 name，用于设置映射数据库表的列名。此外，该标注还包含其它多个属性，如：unique 、nullable、length 等。</p>
<p>@Column 标注的 columnDefinition 属性: 表示该字段在数据库中的实际类型.通常 ORM 框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR, 如果要将 String 类型映射到特定数据库的 BLOB 或TEXT 字段类型.</p>
<p>@Column标注也可置于属性的getter方法之前</p>
<h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.</p>
<p>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic</p>
<h3 id="Temporal"><a href="#Temporal" class="headerlink" title="@Temporal"></a>@Temporal</h3><p>在核心的 Java API 中并没有定义 Date 类型的精度(temporal precision).  而在数据库中,表示 Date 类型的数据有 DATE, TIME, 和 TIMESTAMP 三种精度(即单纯的日期,时间,或者两者 兼备). 在进行属性映射时可使用@Temporal注解来调整精度</p>
<p><img src="../images/image-20210612175625699.png" alt="image-20210612175625699"></p>
<p>对应数据库：</p>
<p><img src="../images/image-20210612175607590.png" alt="image-20210612175607590"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table jpa_customers;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `jpa_customers` (</span><br><span class="line">  `id` int NOT NULL,</span><br><span class="line">  `birth` date DEFAULT NULL,</span><br><span class="line">  `createdTime` datetime(6) DEFAULT NULL,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `LAST_NAME` varchar(50) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>

<h2 id="4、JPA-API"><a href="#4、JPA-API" class="headerlink" title="4、JPA API"></a>4、JPA API</h2><h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><p>用于获取 EntityManagerFactory 实例。该类包含一个名为 createEntityManagerFactory 的 静态方法 。</p>
<p>createEntityManagerFactory 方法有如下两个重载版本。</p>
<ul>
<li>带有一个参数的方法以 JPA 配置文件 persistence.xml 中的持久化单元名为参数</li>
<li>带有两个参数的方法：前一个参数含义相同，后一个参数 Map类型，用于设置 JPA 的相关属性，这时将忽略其它地方设置的属性。Map 对象的属性名必须是 JPA 实现库提供商的名字空间约定的属性名。</li>
</ul>
<p><img src="../images/image-20210612184416168.png" alt="image-20210612184416168"></p>
<h3 id="EntityManagerFactory"><a href="#EntityManagerFactory" class="headerlink" title="EntityManagerFactory"></a>EntityManagerFactory</h3><p>EntityManagerFactory 接口主要用来创建 EntityManager 实例。该接口约定了如下4个方法：</p>
<ul>
<li><p>createEntityManager()：用于创建实体管理器对象实例。</p>
</li>
<li><p>createEntityManager(Map map)：用于创建实体管理器对象实例的重载方法，Map 参数用于提供 EntityManager 的属性。</p>
</li>
<li><p>isOpen()：检查 EntityManagerFactory 是否处于打开状态。实体管理器工厂创建后一直处于打开状态，除非调用close()方法将其关闭。</p>
</li>
<li><p>close()：关闭 EntityManagerFactory 。 EntityManagerFactory 关闭后将释放所有资源，isOpen()方法测试将返回 false，其它方法将不能调用，否则将导致IllegalStateException异常。</p>
</li>
</ul>
<h3 id="EntityManager"><a href="#EntityManager" class="headerlink" title="EntityManager"></a>EntityManager</h3><p>是完成持久化操作的核心对象。实体作为普通 Java 对象，只有在调用 EntityManager 将其持久化后才会变成持久化对象。EntityManager 对象在一组实体类与底层数据源之间进行 O/R 映射的管理。它可以用来管理和更新 Entity Bean, 根椐主键查找 Entity Bean, 还可以通过JPQL语句查询实体。</p>
<p> 实体的状态:</p>
<p>新建状态:   新创建的对象，尚未拥有持久性主键。</p>
<p>持久化状态：已经拥有持久性主键并和持久化建立了上下文环境</p>
<p>游离状态：拥有持久化主键，但是没有与持久化建立上下文环境</p>
<p>删除状态:  拥有持久化主键，已经和持久化建立上下文环境，但是从数据库中删除。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">// 返回指定的 OID 对应的实体类对象</span><br><span class="line">find (Class&lt;T&gt; entityClass,Object primaryKey)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getReference (Class&lt;T&gt; entityClass,Object primaryKey)</span><br><span class="line"></span><br><span class="line">// 用于将新创建的 Entity 纳入到 EntityManager 的管理</span><br><span class="line">persist (Object entity)</span><br><span class="line"></span><br><span class="line">remove (Object entity)</span><br><span class="line"></span><br><span class="line">// 用于处理 Entity 的同步。即数据库的插入和更新操作</span><br><span class="line">merge (T entity)</span><br><span class="line"></span><br><span class="line">// 同步持久上下文环境</span><br><span class="line">flush ()</span><br><span class="line"></span><br><span class="line">// 设置持久上下文环境的Flush模式，自动更新或者提交事务才刷新</span><br><span class="line">setFlushMode (FlushModeType flushMode)</span><br><span class="line"></span><br><span class="line">// 获取持久上下文环境的Flush模式</span><br><span class="line">getFlushMode ()</span><br></pre></td></tr></table></figure>

<h3 id="EntityTransaction"><a href="#EntityTransaction" class="headerlink" title="EntityTransaction"></a>EntityTransaction</h3><p><code>begin(), commit(), rollback()</code> 等</p>
<h2 id="5、映射关系"><a href="#5、映射关系" class="headerlink" title="5、映射关系"></a>5、映射关系</h2><h3 id="单向多对一"><a href="#单向多对一" class="headerlink" title="单向多对一"></a>单向多对一</h3><p>例如：多个订单属于一个客户</p>
<p>只需从n的一端可以访问1的一端</p>
<p>1、订单实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;jpa_order&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;order_name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射单向多对一关系,，多个订单属于一个客户</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;customer_id&quot;)</span><span class="comment">// 映射外键，同时声明列名</span></span><br><span class="line">    <span class="meta">@ManyToOne</span><span class="comment">// 这里可以设置懒加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customer = customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, orderName=&#x27;&quot;</span> + orderName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, customer=&quot;</span> + customer +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setLastName(<span class="string">&quot;小华&quot;</span>);</span><br><span class="line">    customer.setEmail(<span class="string">&quot;ff@163.com&quot;</span>);</span><br><span class="line">    customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">    customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">    order1.setOrderName(<span class="string">&quot;O-FF-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">    order2.setOrderName(<span class="string">&quot;O-FF-2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Order order3 = <span class="keyword">new</span> Order();</span><br><span class="line">    order3.setOrderName(<span class="string">&quot;O-FF-3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置关联关系</span></span><br><span class="line">    order1.setCustomer(customer);</span><br><span class="line">    order2.setCustomer(customer);</span><br><span class="line">    order3.setCustomer(customer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    entityManager.persist(customer);</span><br><span class="line">    entityManager.persist(order1);</span><br><span class="line">    entityManager.persist(order2);</span><br><span class="line">    entityManager.persist(order3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果先保存订单，实际上会把订单的<code>customer_id</code>设为<code>null</code>，之后再进行更新操作，开销变大了</p>
<p>【建议】</p>
<p>先保存 1 的一端，再保存多的一端</p>
<p>删除的时候因为有外键关联，不能直接删除 1 的一端</p>
<h3 id="单向一对多"><a href="#单向一对多" class="headerlink" title="单向一对多"></a>单向一对多</h3><p>一个客户有多个订单</p>
<p>1、修改订单类，去掉 Customer 属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;jpa_order&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;order_name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、在用户里添加订单属性（是个集合或者列表）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 映射单向一对多</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;customer_id&quot;)</span></span><br><span class="line"><span class="meta">@OneToMany</span><span class="comment">// 默认懒加载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.orders = orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToMany</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setLastName(<span class="string">&quot;小华&quot;</span>);</span><br><span class="line">    customer.setEmail(<span class="string">&quot;gg@163.com&quot;</span>);</span><br><span class="line">    customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">    customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">    order1.setOrderName(<span class="string">&quot;O-GG-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">    order2.setOrderName(<span class="string">&quot;O-GG-2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Order order3 = <span class="keyword">new</span> Order();</span><br><span class="line">    order3.setOrderName(<span class="string">&quot;O-GG-3&quot;</span>);</span><br><span class="line">    customer.getOrders().add(order1);</span><br><span class="line">    customer.getOrders().add(order2);</span><br><span class="line">    customer.getOrders().add(order3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    entityManager.persist(customer);</span><br><span class="line">    entityManager.persist(order1);</span><br><span class="line">    entityManager.persist(order2);</span><br><span class="line">    entityManager.persist(order3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【注意】：单向一对多保存时一定会有更新语句发生，与保存顺序无关。因为多的一端再插入时不会同时插入外键列</p>
<p>删除一的一端，会把关联的多的一端外键置空，然后删除，可以在<code>@OneToMany</code>设置级联删除</p>
<h3 id="双向多对一"><a href="#双向多对一" class="headerlink" title="双向多对一"></a>双向多对一</h3><p>订单属性里面有客户，客户里面有订单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;customer_id&quot;)</span></span><br><span class="line">    <span class="meta">@OneToMany</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;customer_id&quot;)</span><span class="comment">// 映射外键</span></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>映射的外键名要一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToOne</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setLastName(<span class="string">&quot;小华&quot;</span>);</span><br><span class="line">    customer.setEmail(<span class="string">&quot;ww@163.com&quot;</span>);</span><br><span class="line">    customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">    customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">    order1.setOrderName(<span class="string">&quot;O-ww-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Order order2 = <span class="keyword">new</span> Order();</span><br><span class="line">    order2.setOrderName(<span class="string">&quot;O-ww-2&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置关联关系</span></span><br><span class="line">    order1.setCustomer(customer);</span><br><span class="line">    order2.setCustomer(customer);</span><br><span class="line"></span><br><span class="line">    customer.getOrders().add(order1);</span><br><span class="line">    customer.getOrders().add(order2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    entityManager.persist(customer);<span class="comment">// n条update，写后面就是 2n 条</span></span><br><span class="line">    entityManager.persist(order1);</span><br><span class="line">    entityManager.persist(order2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果先保存多的一端，会有多余的更新语句</p>
<p>让多的一方来维护关联关系，在 @OneToMany 中设置 mapperBy（值为多的一方的 customer 属性）</p>
<p>【注意】</p>
<p>如果在 1 的一端 @OneToMany 中使用 mapperBy，就不能再使用 @JoinColumn</p>
<h3 id="双向一对一"><a href="#双向一对一" class="headerlink" title="双向一对一"></a>双向一对一</h3><p>基于外键的 1-1 关联关系：在双向的一对一关联中，需要在关系被维护端(inverse side)中的 @OneToOne 注释中指定 mappedBy，以指定是这一关联中的被维护端。同时需要在关系维护端(owner side)建立外键列指向关系被维护端的主键列。</p>
<p>设计：一个部门只能有一个经理，一个经理也只能管一个部门</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;jpa_manager&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String mgrName;</span><br><span class="line">    <span class="keyword">private</span> Department dept;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(mappedBy = &quot;mgr&quot;)</span><span class="comment">// 不维护关联关系（等于说是我这张表里面没有这个字段，虽然属性里面有），需要设置 mappedBy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = &quot;jpa_department&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> Manager mgr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span> <span class="comment">// 映射一对一关联关系，维护关联关系</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;mgr_id&quot;, unique = true)</span><span class="comment">// 一对一需要添加 unique=true</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Manager <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">    manager.setMgrName(<span class="string">&quot;M-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Department department = <span class="keyword">new</span> Department();</span><br><span class="line">    department.setDeptName(<span class="string">&quot;D-1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置关联关系</span></span><br><span class="line">    manager.setDept(department);</span><br><span class="line">    department.setMgr(manager);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    entityManager.persist(manager);<span class="comment">// 先保存不维护关联关系的（即没有外键的一方）</span></span><br><span class="line">    entityManager.persist(department);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试查找：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，若获取维护关联关系的一方，则会通过左外连接获取其关联的对象</span></span><br><span class="line"><span class="comment">// 但是可以设置维护关联关系的一方的 @OneToOne 的 fetch 属性来修改加载策略来实现懒加载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneToOneFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Department dept = entityManager.find(Department.class, <span class="number">1</span>);</span><br><span class="line">    System.out.println(dept.getDeptName());</span><br><span class="line">    System.out.println(dept.getMgr().getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        department0<span class="built_in">_</span>.id as id1<span class="built_in">_</span>1<span class="built_in">_</span>0<span class="built_in">_</span>,</span><br><span class="line">        department0<span class="built_in">_</span>.deptName as deptname2<span class="built_in">_</span>1<span class="built_in">_</span>0<span class="built_in">_</span>,</span><br><span class="line">        department0<span class="built_in">_</span>.mgr<span class="built_in">_</span>id as mgr<span class="built_in">_</span>id3<span class="built_in">_</span>1<span class="built_in">_</span>0<span class="built_in">_</span>,</span><br><span class="line">        manager1<span class="built_in">_</span>.id as id1<span class="built_in">_</span>2<span class="built_in">_</span>1<span class="built_in">_</span>,</span><br><span class="line">        manager1<span class="built_in">_</span>.mgr<span class="built_in">_</span>name as mgr<span class="built_in">_</span>name2<span class="built_in">_</span>2<span class="built_in">_</span>1<span class="built_in">_</span> </span><br><span class="line">    from</span><br><span class="line">        jpa<span class="built_in">_</span>department department0<span class="built_in">_</span> </span><br><span class="line">    left outer join</span><br><span class="line">        jpa<span class="built_in">_</span>manager manager1<span class="built_in">_</span> </span><br><span class="line">            on department0<span class="built_in">_</span>.mgr<span class="built_in">_</span>id=manager1<span class="built_in">_</span>.id </span><br><span class="line">    where</span><br><span class="line">        department0<span class="built_in">_</span>.id=?</span><br><span class="line">D-1</span><br><span class="line">com.tcmyxc.helloworld.Manager</span><br></pre></td></tr></table></figure>



<p>【注意】：默认情况下，若获取不维护关联关系的一方，则也会通过左外连接获取其关联的对象，虽然可以改为懒加载，但是会多发 SQL 语句，得不偿失</p>
<h3 id="双向多对多"><a href="#双向多对多" class="headerlink" title="双向多对多"></a>双向多对多</h3><p>在双向多对多关系中，我们必须指定一个关系维护端(owner side),可以通过 @ManyToMany 注释中指定 mappedBy 属性来标识其为关系维护端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;jpa_item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String itemName;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Category&gt; categories = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">// 不写会报空指针，因为不能直接使用接口，接口变量必须引用实现了接口的类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置多对多的关系</span></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="comment">// 设置中间表</span></span><br><span class="line">    <span class="comment">// 1、joinColumns 映射当前类</span></span><br><span class="line">    <span class="comment">// 2、inverseJoinColumns 映射关联的类</span></span><br><span class="line">    <span class="meta">@JoinTable(joinColumns = &#123;</span></span><br><span class="line"><span class="meta">            @JoinColumn(name = &quot;item_id&quot;, // 中间表的外键名</span></span><br><span class="line"><span class="meta">                    referencedColumnName = &quot;id&quot;)// 外键指向当前表的那个字段</span></span><br><span class="line"><span class="meta">            &#125;,</span></span><br><span class="line"><span class="meta">            inverseJoinColumns = &#123;</span></span><br><span class="line"><span class="meta">            @JoinColumn(name = &quot;category_id&quot;,// 中间表的外键名</span></span><br><span class="line"><span class="meta">                    referencedColumnName = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Category&gt; <span class="title">getCategories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categories;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;jpa_category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Item&gt; items;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;categories&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>初始化表，可以发现建立了三张表</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table jpa<span class="built_in">_</span>category (</span><br><span class="line">       id integer not null auto<span class="built_in">_</span>increment,</span><br><span class="line">        category<span class="built_in">_</span>name varchar(255),</span><br><span class="line">        primary key (id)</span><br><span class="line">    ) engine=InnoDB</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table jpa<span class="built_in">_</span>item (</span><br><span class="line">       id integer not null auto<span class="built_in">_</span>increment,</span><br><span class="line">        item<span class="built_in">_</span>name varchar(255),</span><br><span class="line">        primary key (id)</span><br><span class="line">    ) engine=InnoDB</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table jpa<span class="built_in">_</span>item<span class="built_in">_</span>jpa<span class="built_in">_</span>category (</span><br><span class="line">       item<span class="built_in">_</span>id integer not null,</span><br><span class="line">        category<span class="built_in">_</span>id integer not null,</span><br><span class="line">        primary key (item<span class="built_in">_</span>id, category<span class="built_in">_</span>id)</span><br><span class="line">    ) engine=InnoDB</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    alter table jpa<span class="built_in">_</span>item<span class="built_in">_</span>jpa<span class="built_in">_</span>category </span><br><span class="line">       add constraint FKedbrfsg4dplyysrucevm258pk </span><br><span class="line">       foreign key (category<span class="built_in">_</span>id) </span><br><span class="line">       references jpa<span class="built_in">_</span>category (id)</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    alter table jpa<span class="built_in">_</span>item<span class="built_in">_</span>jpa<span class="built_in">_</span>category </span><br><span class="line">       add constraint FK7vk3csx9i2cq3etibrkouumid </span><br><span class="line">       foreign key (item<span class="built_in">_</span>id) </span><br><span class="line">       references jpa<span class="built_in">_</span>item (id)</span><br></pre></td></tr></table></figure>



<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToMany</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Item i1 = <span class="keyword">new</span> Item();</span><br><span class="line">    Item i2 = <span class="keyword">new</span> Item();</span><br><span class="line"></span><br><span class="line">    i1.setItemName(<span class="string">&quot;item1&quot;</span>);</span><br><span class="line">    i2.setItemName(<span class="string">&quot;item2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Category c1 = <span class="keyword">new</span> Category();</span><br><span class="line">    Category c2 = <span class="keyword">new</span> Category();</span><br><span class="line">    Category c3 = <span class="keyword">new</span> Category();</span><br><span class="line"></span><br><span class="line">    c1.setCategoryName(<span class="string">&quot;C-1&quot;</span>);</span><br><span class="line">    c2.setCategoryName(<span class="string">&quot;C-2&quot;</span>);</span><br><span class="line">    c3.setCategoryName(<span class="string">&quot;C-3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置关联关系</span></span><br><span class="line">    i1.getCategories().add(c1);</span><br><span class="line">    i1.getCategories().add(c2);</span><br><span class="line">    i1.getCategories().add(c3);</span><br><span class="line"></span><br><span class="line">    i2.getCategories().add(c1);</span><br><span class="line">    i2.getCategories().add(c3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    entityManager.persist(i1);</span><br><span class="line">    entityManager.persist(i2);</span><br><span class="line">    entityManager.persist(c1);</span><br><span class="line">    entityManager.persist(c2);</span><br><span class="line">    entityManager.persist(c3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>很尴尬地失败了</p>
<p><img src="../images/image-20210616165321122.png" alt="image-20210616165321122"></p>
<p>错误原因：不能直接使用接口变量，接口变量必须引用实现了接口的类的实例。</p>
<p>解决方法：在类定义那里把接口变量改为正确的引用。</p>
<p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testManyToManyFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Item item = entityManager.find(Item.class, <span class="number">1</span>);</span><br><span class="line">    System.out.println(item.getItemName());</span><br><span class="line"></span><br><span class="line">    System.out.println(item.getCategories().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        item0<span class="built_in">_</span>.id as id1<span class="built_in">_</span>4<span class="built_in">_</span>0<span class="built_in">_</span>,</span><br><span class="line">        item0<span class="built_in">_</span>.item<span class="built_in">_</span>name as item<span class="built_in">_</span>nam2<span class="built_in">_</span>4<span class="built_in">_</span>0<span class="built_in">_</span> </span><br><span class="line">    from</span><br><span class="line">        jpa<span class="built_in">_</span>item item0<span class="built_in">_</span> </span><br><span class="line">    where</span><br><span class="line">        item0<span class="built_in">_</span>.id=?</span><br><span class="line">I-1</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        categories0<span class="built_in">_</span>.item<span class="built_in">_</span>id as item<span class="built_in">_</span>id1<span class="built_in">_</span>0<span class="built_in">_</span>0<span class="built_in">_</span>,</span><br><span class="line">        categories0<span class="built_in">_</span>.category<span class="built_in">_</span>id as category2<span class="built_in">_</span>0<span class="built_in">_</span>0<span class="built_in">_</span>,</span><br><span class="line">        category1<span class="built_in">_</span>.id as id1<span class="built_in">_</span>1<span class="built_in">_</span>1<span class="built_in">_</span>,</span><br><span class="line">        category1<span class="built_in">_</span>.category<span class="built_in">_</span>name as category2<span class="built_in">_</span>1<span class="built_in">_</span>1<span class="built_in">_</span> </span><br><span class="line">    from</span><br><span class="line">        item<span class="built_in">_</span>category categories0<span class="built_in">_</span> </span><br><span class="line">    inner join</span><br><span class="line">        jpa<span class="built_in">_</span>category category1<span class="built_in">_</span> </span><br><span class="line">            on categories0<span class="built_in">_</span>.category<span class="built_in">_</span>id=category1<span class="built_in">_</span>.id </span><br><span class="line">    where</span><br><span class="line">        categories0<span class="built_in">_</span>.item<span class="built_in">_</span>id=?</span><br><span class="line">2</span><br></pre></td></tr></table></figure>



<p>可以看出来，这里默认用的是懒加载。其实从分类里面查标签也是懒加载。</p>
<h2 id="6、JQPL"><a href="#6、JQPL" class="headerlink" title="6、JQPL"></a>6、JQPL</h2><p>Java Persistence Query Language 的简称。JPQL 是一种和 SQL 非常类似的中间性和对象化查询语言，它最终会被编译成针对不同底层数据库的 SQL 查询，从而屏蔽不同数据库的差异。</p>
<p>JPQL语言的语句可以是 select 语句、update 语句或delete语句，它们都通过 Query 接口封装执行</p>
<h3 id="Query-接口"><a href="#Query-接口" class="headerlink" title="Query 接口"></a>Query 接口</h3><p>Query接口封装了执行数据库查询的相关方法。调用 EntityManager 的 createQuery、create NamedQuery 及 createNativeQuery 方法可以获得查询对象，进而可调用 Query 接口的相关方法来执行查询操作。</p>
<h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><p>用于执行查询。其语法可表示为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select_clause </span><br><span class="line">form_clause </span><br><span class="line">[where_clause] </span><br><span class="line">[groupby_clause] </span><br><span class="line">[having_clause]</span><br><span class="line">[orderby_clause]</span><br></pre></td></tr></table></figure>

<p>select、from 都是 JPQL 的关键字，通常全大写或全小写，建议不要大小写混用。</p>
<p><strong>查询所有</strong>实体的 JPQL 查询字串很简单，例如：</p>
<p>​    select o from Order o 或  select o from Order as o</p>
<p>关键字 as 可以省去。</p>
<p>标识符变量的命名规范与 Java 标识符相同，且区分大小写。</p>
<p>调用 EntityManager 的 createQuery() 方法可创建查询对象，接着调用 Query 接口的 getResultList() 方法就可获得查询结果集。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Query query = entityManager.createQuery( <span class="string">&quot;select o from Order o&quot;</span>); </span><br><span class="line">List orders = query.getResultList();</span><br><span class="line">Iterator iterator = orders.iterator();</span><br><span class="line"><span class="keyword">while</span>( iterator.hasNext() ) &#123;</span><br><span class="line">	<span class="comment">// 处理Order</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JPQL也支持<strong>包含参数的查询</strong>，例如：</p>
<p>​    select o from Orders o where o.id = :myId</p>
<p>​    select o from Orders o where o.id = :myId and o.customer = :customerName</p>
<p>注意：参数名前必须冠以冒号(:)，执行查询前须使用Query.setParameter(name, value)方法给参数赋值。</p>
<p>可以<strong>不使用参数名而使用参数的序号</strong>，例如：</p>
<p>select o from Order o where o.id = ?1 and o.customer = ?2</p>
<p>其中 ?1 代表第一个参数，?2 代表第一个参数。在执行查询之前需要使用重载方法Query.setParameter(pos, value) 提供参数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Query query = entityManager.createQuery( <span class="string">&quot;select o from Orders o where o.id = ?1 and o.customer = ?2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占位符的索引是从 1 开始的</span></span><br><span class="line">query.setParameter( <span class="number">1</span>, <span class="number">2</span> );</span><br><span class="line">query.setParameter( <span class="number">2</span>, <span class="string">&quot;John&quot;</span> );</span><br><span class="line">List orders = query.getResultList();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>JPQL也支持子查询，在 where 或 having 子句中可以包含另一个查询。</p>
<p><strong>查询部分属性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询部分属性</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPartlyProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String jpql = <span class="string">&quot;select c.email, c.lastName from Customer c where c.id &gt; ?1&quot;</span>;</span><br><span class="line">    Query query = entityManager.createQuery(jpql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 占位符的索引是从 1 开始的</span></span><br><span class="line">    query.setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    List resultList = query.getResultList();</span><br><span class="line">    System.out.println(resultList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[[Ljava.lang.Object;@c6b2dd9, [Ljava.lang.Object;@73437222]</span><br></pre></td></tr></table></figure>

<p>可以看到是个 Object 数组</p>
<p>如果想返回对应类的对象，需要有对应参数的构造器，同时修改查询语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Customer 类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String lastName, String email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试语句</span></span><br><span class="line">String jpql = <span class="string">&quot;select new Customer(c.email, c.lastName) from Customer c where c.id &gt; ?1&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[Customer&#123;id=null, lastName=&#x27;ww@163.com&#x27;, email=&#x27;小华&#x27;, createdTime=null, birth=null&#125;, Customer&#123;id=null, lastName=&#x27;ww@163.com&#x27;, email=&#x27;小华&#x27;, createdTime=null, birth=null&#125;]</span><br></pre></td></tr></table></figure>

<p>这里 JQPL 帮我们做了底层的转换，所以数组里面放的是 Customer 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(resultList.get(<span class="number">0</span>).getClass().getName());</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">com.tcmyxc.helloworld.Customer</span><br></pre></td></tr></table></figure>

<p><strong>查询语句也可以放在实体类头上</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NamedQuery(name = &quot;testNamedQuery&quot;, query = &quot;SELECT c FROM Customer c where c.id = ?1&quot;)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;JPA_CUSTOMERS&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNamedQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 指定 name，同时设置参数</span></span><br><span class="line">    Query query = entityManager.createNamedQuery(<span class="string">&quot;testNamedQuerySQL&quot;</span>).setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Customer customer = (Customer) query.getSingleResult();</span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Customer&#123;id=1, lastName=&#x27;小华&#x27;, email=&#x27;ww@163.com&#x27;, createdTime=2021-06-13 17:07:17.677, birth=2021-06-13&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Native SQL</strong></p>
<p>指原生的 SQL 语句，不再是 JQPL 的语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativedQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select birth from JPA_CUSTOMERS c where c.id = 1&quot;</span>;</span><br><span class="line">    Query query = entityManager.createNativeQuery(sql);</span><br><span class="line">    System.out.println(query.getSingleResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        birth </span><br><span class="line">    from</span><br><span class="line">        JPA<span class="built_in">_</span>CUSTOMERS c </span><br><span class="line">    where</span><br><span class="line">        c.id = 1</span><br><span class="line">2021-06-13</span><br></pre></td></tr></table></figure>



<p>JQPL 也支持 order by、group by、having、关联查询、子查询等</p>
<h3 id="update-和-delete"><a href="#update-和-delete" class="headerlink" title="update 和 delete"></a>update 和 delete</h3><p>更新操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;update Customer c set c.lastName = ?1 where c.id = ?2&quot;</span>;</span><br><span class="line">    Query query = entityManager.createQuery(sql);</span><br><span class="line">    query.setParameter(<span class="number">1</span>, <span class="string">&quot;YYY&quot;</span>).setParameter(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    query.executeUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="../images/image-20210617115000945.png" alt="image-20210617115000945"></p>
<p>删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDel</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;delete from Order o where o.id = ?1&quot;</span>;</span><br><span class="line">    Query query = entityManager.createQuery(sql);</span><br><span class="line">    query.setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    query.executeUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="../images/image-20210617120812216.png" alt="image-20210617120812216"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JPA</tag>
        <tag>JQPL</tag>
      </tags>
  </entry>
</search>
